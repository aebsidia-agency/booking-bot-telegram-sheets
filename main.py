import logging
import re
import os
from typing import Dict, Any
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from config import TELEGRAM_TOKEN, ADMIN_ID, SERVICES, AVAILABLE_SLOTS

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler ---
SELECT_SERVICE, SELECT_SLOT, ENTER_NAME, ENTER_PHONE, CONFIRM = range(5)

# --- –ö–æ–Ω—Ñ–∏–≥ ---
GOOGLE_SHEETS_CONFIG = {
    'SCOPE': [
        'https://spreadsheets.google.com/feeds',
        'https://www.googleapis.com/auth/drive'
    ],
    'CREDENTIALS_FILE': 'credentials.json',
    'SHEET_NAME': '–ö–ª–∏–µ–Ω—Ç—ã –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∞',
    'SHEET_TAB': '–ó–∞–ø–∏—Å–∏',  # –ò–º—è –ª–∏—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
}

# --- Google Sheets ---
SCOPE = GOOGLE_SHEETS_CONFIG['SCOPE']
SHEET_NAME = GOOGLE_SHEETS_CONFIG['SHEET_NAME']
CREDENTIALS_FILE = GOOGLE_SHEETS_CONFIG['CREDENTIALS_FILE']

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
def validate_phone(phone: str) -> bool:
    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –†–§: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX
    return bool(re.fullmatch(r"(\+7|8)\d{10}", phone))

# --- Google Sheets client ---
def get_gs_client():
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, SCOPE)
    client = gspread.authorize(creds)
    return client

def save_to_gs(data: Dict[str, Any]):
    try:
        client = get_gs_client()
        sheet = client.open(SHEET_NAME).sheet1
        sheet.append_row([
            data['name'],
            data['phone'],
            data['service'],
            data['slot'],
            data['user_id']
        ])
        logger.info(f"–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google Sheets: {e}")

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏–∑ Google Sheets ---
def get_booked_slots(service: str) -> set:
    try:
        client = get_gs_client()
        sheet = client.open(SHEET_NAME).sheet1
        records = sheet.get_all_records()
        return set(row['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è'] for row in records if row['–£—Å–ª—É–≥–∞'] == service)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤: {e}")
        return set()

# --- –°—Ç–∞—Ä—Ç ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥.")
    keyboard = [[InlineKeyboardButton(service, callback_data=service)] for service in SERVICES]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    instruction = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥–∏ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∞.\n\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è\n"
        "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω\n"
        "4Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å\n\n"
        "–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å.\n"
        "\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:")
    await update.message.reply_text(
        instruction,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_SERVICE

# --- –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ ---
async def select_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    service = query.data
    if service == "cancel":
        return await cancel(update, context)
    context.user_data['service'] = service
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É—Å–ª—É–≥—É: {service}")
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
    booked_slots = get_booked_slots(service)
    slots = AVAILABLE_SLOTS.get(service, [])
    keyboard = []
    for slot in slots:
        if slot in booked_slots:
            keyboard.append([InlineKeyboardButton(f"{slot} ‚ùå –ó–∞–Ω—è—Ç–æ", callback_data="slot_busy")])
        else:
            keyboard.append([InlineKeyboardButton(slot, callback_data=slot)])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_service"), InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {service}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_SLOT

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' —Å —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞ ---
async def back_to_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton(service, callback_data=service)] for service in SERVICES]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_SERVICE

# --- –í—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ ---
async def select_slot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == "back_to_service":
        return await back_to_service(update, context)
    if query.data == "cancel":
        return await cancel(update, context)
    if query.data == "slot_busy":
        await query.answer(text="–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π!", show_alert=True)
        return SELECT_SLOT
    slot = query.data
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å (–Ω–∞ —Å–ª—É—á–∞–π –≥–æ–Ω–∫–∏)
    booked_slots = get_booked_slots(context.user_data['service'])
    if slot in booked_slots:
        await query.answer(text="–≠—Ç–æ—Ç —Å–ª–æ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–Ω—è–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π!", show_alert=True)
        return SELECT_SLOT
    context.user_data['slot'] = slot
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å–ª–æ—Ç: {slot}")
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_slot"), InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {context.user_data['service']}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {slot}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ENTER_NAME

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' —Å —ç—Ç–∞–ø–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ ---
async def back_to_slot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    service = context.user_data.get('service')
    slots = AVAILABLE_SLOTS.get(service, [])
    keyboard = [[InlineKeyboardButton(slot, callback_data=slot)] for slot in slots]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_service"), InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {service}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_SLOT

# --- –í–≤–æ–¥ –∏–º–µ–Ω–∏ ---
async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    name = update.message.text.strip()
    if not name:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_slot"), InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è. –≠—Ç–æ –ø–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! üòä",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ENTER_NAME
    context.user_data['name'] = name
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∏–º—è: {name}")
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_name"), InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ENTER_PHONE

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' —Å —ç—Ç–∞–ø–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
async def back_to_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {context.user_data.get('service')}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {context.user_data.get('slot')}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_slot"), InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]])
    )
    return ENTER_NAME

# --- –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    phone = update.message.text.strip()
    if not phone:
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_name"), InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –≠—Ç–æ –ø–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! üì±",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ENTER_PHONE
    if not validate_phone(phone):
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_name"), InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        await update.message.reply_text(
            "–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–∏–º–µ—Ä: +79991234567 –∏–ª–∏ 89991234567. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ENTER_PHONE
    context.user_data['phone'] = phone
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")
    summary = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–£—Å–ª—É–≥–∞: {context.user_data['service']}\n"
        f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {context.user_data['slot']}\n"
        f"–ò–º—è: {context.user_data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_phone")]
    ]
    await update.message.reply_text(summary, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' —Å —ç—Ç–∞–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
async def back_to_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_name"), InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79991234567):",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ENTER_PHONE

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
async def confirm_text_warning(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_phone")]
    ]
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏!",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CONFIRM

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ---
async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == "confirm":
        user_id = query.from_user.id
        data = {
            'name': context.user_data['name'],
            'phone': context.user_data['phone'],
            'service': context.user_data['service'],
            'slot': context.user_data['slot'],
            'user_id': user_id
        }
        save_to_gs(data)
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=(
                f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n"
                f"–£—Å–ª—É–≥–∞: {data['service']}\n"
                f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {data['slot']}\n"
                f"–ò–º—è: {data['name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
                f"Telegram ID: {user_id}"
            )
        )
        keyboard = [[InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â—ë —Ä–∞–∑", callback_data="restart")]]
        await query.edit_message_text(
            "üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â—ë?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        logger.info(f"–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {data}")
        return ConversationHandler.END
    elif query.data == "restart":
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è
        await start(update, context)
        return SELECT_SERVICE
    else:
        await query.edit_message_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return ConversationHandler.END

# --- –û—Ç–º–µ–Ω–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    await update.message.reply_text(
        "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å.")
    return ConversationHandler.END

# --- –û—à–∏–±–∫–∞ ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(msg="Exception while handling update:", exc_info=context.error)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_SERVICE: [CallbackQueryHandler(select_service), CallbackQueryHandler(cancel, pattern="^cancel$")],
            SELECT_SLOT: [CallbackQueryHandler(select_slot), CallbackQueryHandler(back_to_service, pattern="^back_to_service$"), CallbackQueryHandler(cancel, pattern="^cancel$")],
            ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name), CallbackQueryHandler(back_to_slot, pattern="^back_to_slot$"), CallbackQueryHandler(cancel, pattern="^cancel$")],
            ENTER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_phone), CallbackQueryHandler(back_to_name, pattern="^back_to_name$"), CallbackQueryHandler(cancel, pattern="^cancel$")],
            CONFIRM: [CallbackQueryHandler(confirm), CallbackQueryHandler(back_to_phone, pattern="^back_to_phone$"), CallbackQueryHandler(cancel, pattern="^cancel$"), MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_text_warning)]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler('cancel', cancel))
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    application.run_polling()

if __name__ == '__main__':
    main() 